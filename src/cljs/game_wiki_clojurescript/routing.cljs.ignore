;; (ns game-wiki-clojurescript.routing
;;   (:require [reitit.frontend :as reitit]
;;             [game-wiki-clojurescript.cards.views :as cards]
;;             [game-wiki-clojurescript.cards.views :as faqs]))

;; ;; -------------------------
;; ;; Routes
;; (def router
;;   (reitit/router
;;    [["/" :index]
;;     ["/cards" {:name :card-list :area :cards}]
;;     ["/faqs" {:area :faqs}
;;      ["" :faq-list]
;;      ["/:faq-id" :faq]
;;      ["/search/:search-term" :faq-search]]]))

;; (defn route-for [route & [params]]
;;   (if params
;;     (reitit/match-by-name router route params)
;;     (reitit/match-by-name router route)))

;; (defn path-for [route & [params]]
;;   (:path (if params
;;            (route-for route params)
;;            (route-for route))))

;; ;; -------------------------
;; ;; Translate routes -> page components
;; ; Should these just be rolled into the router?
;; ; I guess this way gives you a level of indirection?
;; ; and the router technically exists w/o knowing anything of
;; ; our codebase
;; (defn page-for [route]
;;   (case route
;;     :card-list #'cards/cards-list-page
;;     :faq-list #'faqs/faq-list-page
;;     :faq #'faqs/faq-page
;;     :faq-search #'faqs/faq-search-page
;;     ""))
